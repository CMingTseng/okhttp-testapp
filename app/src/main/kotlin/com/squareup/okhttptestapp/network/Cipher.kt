package com.squareup.okhttptestapp.network

// https://developer.android.com/reference/javax/net/ssl/SSLSocket.html
enum class Cipher(val enabled: String, val supported: String) {
  TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA("1-8", "1-8"),
  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA("1-8", "1-8"),
  TLS_DHE_DSS_WITH_DES_CBC_SHA("1-8", "1-8"),
  TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA("1-8", "1-8"),
  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA("1-8", "1-8"),
  TLS_DHE_RSA_WITH_DES_CBC_SHA("1-8", "1-8"),
  TLS_RSA_EXPORT_WITH_DES40_CBC_SHA("1-8", "1-8"),
  TLS_RSA_WITH_3DES_EDE_CBC_SHA("1-8", "1-8"),
  TLS_RSA_WITH_DES_CBC_SHA("1-8", "1-8"),
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA("20-22", "9-22"),
  TLS_ECDHE_ECDSA_WITH_RC4_128_SHA("20-23", "20-25"),
  TLS_ECDHE_RSA_WITH_RC4_128_SHA("20-23", "20-25"),
  TLS_DHE_RSA_WITH_AES_128_GCM_SHA256("20-25", "20-25"),
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA("20-25", "9-25"),
  TLS_DHE_RSA_WITH_AES_256_GCM_SHA384("20-25", "20-25"),
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA("20+", "20+"),
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256("20+", "20+"),
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA("20+", "20+"),
  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384("20+", "20+"),
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA("20+", "20+"),
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256("20+", "20+"),
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA("20+", "20+"),
  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384("20+", "20+"),
  TLS_EMPTY_RENEGOTIATION_INFO_SCSV("20+", "20+"),
  TLS_RSA_WITH_AES_128_GCM_SHA256("20+", "20+"),
  TLS_RSA_WITH_AES_256_CBC_SHA("20+", "9+"),
  TLS_RSA_WITH_AES_256_GCM_SHA384("20+", "20+"),
  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA("21+", "21+"),
  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA("21+", "21+"),
  TLS_PSK_WITH_AES_128_CBC_SHA("21+", "21+"),
  TLS_PSK_WITH_AES_256_CBC_SHA("21+", "21+"),
  TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256("24+", "24+"),
  TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256("24+", "24+"),
  TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256("24+", "24+"),
  SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA("9-19", "9-22"),
  SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA("9-19", "9-22"),
  SSL_DHE_DSS_WITH_DES_CBC_SHA("9-19", "9-22"),
  SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA("9-19", "9-22"),
  SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA("9-19", "9-22"),
  SSL_DHE_RSA_WITH_DES_CBC_SHA("9-19", "9-22"),
  SSL_RSA_EXPORT_WITH_DES40_CBC_SHA("9-19", "9-22"),
  SSL_RSA_EXPORT_WITH_RC4_40_MD5("9-19", "9-22"),
  SSL_RSA_WITH_3DES_EDE_CBC_SHA("9-19", "9+"),
  SSL_RSA_WITH_DES_CBC_SHA("9-19", "9-22"),
  SSL_RSA_WITH_RC4_128_MD5("9-19", "9-25"),
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA("9-22", "9-22"),
  SSL_RSA_WITH_RC4_128_SHA("9-23", "9-25"),
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA("9-25", "9-25"),
  TLS_RSA_WITH_AES_128_CBC_SHA("9+", "9+"),
  SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA("", "9-22"),
  SSL_DH_anon_EXPORT_WITH_RC4_40_MD5("", "9-22"),
  SSL_DH_anon_WITH_3DES_EDE_CBC_SHA("", "9-22"),
  SSL_DH_anon_WITH_DES_CBC_SHA("", "9-22"),
  SSL_DH_anon_WITH_RC4_128_MD5("", "9-22"),
  SSL_RSA_WITH_NULL_MD5("", "9-22"),
  SSL_RSA_WITH_NULL_SHA("", "9-22"),
  TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA("", "1-8"),
  TLS_DH_anon_WITH_3DES_EDE_CBC_SHA("", "1-8"),
  TLS_DH_anon_WITH_AES_128_CBC_SHA("", "9-22"),
  TLS_DH_anon_WITH_AES_128_CBC_SHA256("", "20-22"),
  TLS_DH_anon_WITH_AES_128_GCM_SHA256("", "20-22"),
  TLS_DH_anon_WITH_AES_256_CBC_SHA("", "9-22"),
  TLS_DH_anon_WITH_AES_256_CBC_SHA256("", "20-22"),
  TLS_DH_anon_WITH_AES_256_GCM_SHA384("", "20-22"),
  TLS_DH_anon_WITH_DES_CBC_SHA("", "1-8"),
  TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA("", "1-8"),
  TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA("", "1-8"),
  TLS_DH_DSS_WITH_DES_CBC_SHA("", "1-8"),
  TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA("", "1-8"),
  TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA("", "1-8"),
  TLS_DH_RSA_WITH_DES_CBC_SHA("", "1-8"),
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256("", "20-22"),
  TLS_DHE_DSS_WITH_AES_128_GCM_SHA256("", "20-22"),
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA256("", "20-22"),
  TLS_DHE_DSS_WITH_AES_256_GCM_SHA384("", "20-22"),
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA256("", "20-25"),
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256("", "20-25"),
  TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA("", "20-22"),
  TLS_ECDH_anon_WITH_AES_128_CBC_SHA("", "20-22"),
  TLS_ECDH_anon_WITH_AES_256_CBC_SHA("", "20-22"),
  TLS_ECDH_anon_WITH_NULL_SHA("", "20-22"),
  TLS_ECDH_anon_WITH_RC4_128_SHA("", "20-22"),
  TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA("", "20-22"),
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA("", "20-22"),
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256("", "20-22"),
  TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256("", "20-22"),
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA("", "20-22"),
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384("", "20-22"),
  TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384("", "20-22"),
  TLS_ECDH_ECDSA_WITH_NULL_SHA("", "20-22"),
  TLS_ECDH_ECDSA_WITH_RC4_128_SHA("", "20-22"),
  TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA("", "20-22"),
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA("", "20-22"),
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256("", "20-22"),
  TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256("", "20-22"),
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA("", "20-22"),
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384("", "20-22"),
  TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384("", "20-22"),
  TLS_ECDH_RSA_WITH_NULL_SHA("", "20-22"),
  TLS_ECDH_RSA_WITH_RC4_128_SHA("", "20-22"),
  TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA("", "20-22"),
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256("", "20+"),
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384("", "20+"),
  TLS_ECDHE_ECDSA_WITH_NULL_SHA("", "20-22"),
  TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA("", "20-22"),
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256("", "20+"),
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384("", "20+"),
  TLS_ECDHE_RSA_WITH_NULL_SHA("", "20-22"),
  TLS_FALLBACK_SCSV("", "21+"),
  TLS_NULL_WITH_NULL_NULL("", "1-8"),
  TLS_PSK_WITH_3DES_EDE_CBC_SHA("", "21-22"),
  TLS_PSK_WITH_RC4_128_SHA("", "21-25"),
  TLS_RSA_WITH_AES_128_CBC_SHA256("", "20+"),
  TLS_RSA_WITH_AES_256_CBC_SHA256("", "20+"),
  TLS_RSA_WITH_NULL_MD5("", "1-8"),
  TLS_RSA_WITH_NULL_SHA("", "1-8");

  val BoundedRegex = Regex("(\\d+)-(\\d+)")
  val NewestRegex = Regex("(\\d+)\\+")

  val supportedRange = toRange(supported)
  val enabledRange = toRange(enabled)

  private fun toRange(rangeString: String): IntRange? {
    if (NewestRegex.matches(rangeString)) {
      return IntRange(rangeString.dropLast(1).toInt(), 27)
    }

    val bounded = BoundedRegex.matchEntire(rangeString)

    if (bounded != null) {
      return IntRange(bounded.groupValues[1].toInt(), bounded.groupValues[2].toInt())
    }

    return null
  }
}
